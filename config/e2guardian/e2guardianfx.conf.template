<?php
/*
	e2guardianfx.conf.template
	Copyright (C) 2015 Marcello Coutinho
	part of pfSense (http://www.pfSense.org/)
	All rights reserved.
*/
/* ========================================================================== */
/*
	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:

	1. Redistributions of source code must retain the above copyright notice,
	   this list of conditions and the following disclaimer.

	2. Redistributions in binary form must reproduce the above copyright
	   notice, this list of conditions and the following disclaimer in the
	   documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
	INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
	AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
	OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	POSSIBILITY OF SUCH DAMAGE.
*/
/* ========================================================================== */

$dgf= <<<EOF
# e2guardian filter group config file for version 3.1.2


# Filter Group Mode
#
# This option determines whether members of this group have their web access
# unfiltered, filtered, or banned. This mechanism replaces the "banneduserlist"
# and "exceptionuserlist" files from previous versions.
#
# Only filter groups with a mode of 1 need to define phrase, URL, site, extension,
# MIME type and PICS lists; in other modes, these options are ignored to conserve
# memory.
#
# Unauthenticated users are treated as being in the first filter group.
# 0 = banned
# 1 = filtered
# 2 = unfiltered (exception)
# Defaults to 0 if unspecified.
groupmode = {$e2guardian_groups['mode']}

# Filter Group Name
#
# Used to fill in the -FILTERGROUP- placeholder in the HTML template file, and to
# name the group in the access logs.
#
# Defaults to empty string.
groupname = '{$e2guardian_groups['name']}'


# Content Filtering Files Location
bannedphraselist = '{$e2_dir}/etc/e2guardian/lists/bannedphraselist.g_{$e2guardian_groups['name']}'
weightedphraselist = '{$e2_dir}/etc/e2guardian/lists/weightedphraselist.g_{$e2guardian_groups['name']}'
exceptionphraselist = '{$e2_dir}/etc/e2guardian/lists/exceptionphraselist.g_{$e2guardian_groups['name']}'
bannedsitelist = '{$e2_dir}/etc/e2guardian/lists/bannedsitelist.g_{$e2guardian_groups['name']}'
greysitelist = '{$e2_dir}/etc/e2guardian/lists/greysitelist.g_{$e2guardian_groups['name']}'
exceptionsitelist = '{$e2_dir}/etc/e2guardian/lists/exceptionsitelist.g_{$e2guardian_groups['name']}'
bannedurllist = '{$e2_dir}/etc/e2guardian/lists/bannedurllist.g_{$e2guardian_groups['name']}'
greyurllist = '{$e2_dir}/etc/e2guardian/lists/greyurllist.g_{$e2guardian_groups['name']}'
exceptionurllist = '{$e2_dir}/etc/e2guardian/lists/exceptionurllist.g_{$e2guardian_groups['name']}'
exceptionregexpurllist = '{$e2_dir}/etc/e2guardian/lists/exceptionregexpurllist.g_{$e2guardian_groups['name']}'
bannedregexpurllist = '{$e2_dir}/etc/e2guardian/lists/bannedregexpurllist.g_{$e2guardian_groups['name']}'
picsfile = '{$e2_dir}/etc/e2guardian/lists/g_{$e2guardian_groups['name']}'
contentregexplist = '{$e2_dir}/etc/e2guardian/lists/contentregexplist.g_{$e2guardian_groups['name']}'
urlregexplist = '{$e2_dir}/etc/e2guardian/lists/urlregexplist.g_{$e2guardian_groups['name']}'
authexceptionsitelist = '{$e2_dir}/etc/e2guardian/lists/authexceptionsitelist'
authexceptionurllist = '{$e2_dir}/etc/e2guardian/lists/authexceptionurllist'


# Filetype Filtering

# Blanket Download Blocking
#
# If enabled, all files will be blocked, unless they match the
# exceptionextensionlist or exceptionmimetypelist.
# These lists do not override virus scanning.
#
# Exception lists defined above override all types of filtering, including
# the blanket download block.
#
# Defaults to disabled.
# on | off (default = off)
blockdownloads = {$e2guardian_groups['blockdownloads']}
exceptionextensionlist = '{$e2_dir}/etc/e2guardian/lists/exceptionextensionlist.g_{$e2guardian_groups['name']}'
exceptionmimetypelist = '{$e2_dir}/etc/e2guardian/lists/exceptionmimetypelist.g_{$e2guardian_groups['name']}'


# Banned Extensions List
#
# Use the following lists to block specific kinds of file downloads.
# The two exception lists above can be used to override these.
bannedextensionlist = '{$e2_dir}/etc/e2guardian/lists/bannedextensionlist.g_{$e2guardian_groups['name']}'
bannedmimetypelist = '{$e2_dir}/etc/e2guardian/lists/bannedmimetypelist.g_{$e2guardian_groups['name']}'


# Exceptions File Site List
#
# In either file filtering mode, the following list can be used to override
# MIME type and extension blocks for particular domains and URLs (trusted download sites).
exceptionfilesitelist = '{$e2_dir}/etc/e2guardian/lists/exceptionfilesitelist.g_{$e2guardian_groups['name']}'
exceptionfileurllist = '{$e2_dir}/etc/e2guardian/lists/exceptionfileurllist.g_{$e2guardian_groups['name']}'


# Categorise Without Blocking
#
# Supply categorised lists here and the category string shall be logged against
# matching requests, but matching these lists does not perform any filtering
# action.
logsitelist = '{$e2_dir}/etc/e2guardian/lists/logsitelist.g_{$e2guardian_groups['name']}'
logurllist = '{$e2_dir}/etc/e2guardian/lists/logurllist.g_{$e2guardian_groups['name']}'
logregexpurllist = '{$e2_dir}/etc/e2guardian/lists/logregexpurllist.g_{$e2guardian_groups['name']}'


# Outgoing HTTP Header Rules
#
# Optional lists for blocking based on (and modification of) outgoing HTTP
# request headers.  Format for headerregexplist is one modification rule per
# line, similar to content/URL modifications.
#
# Format for bannedregexpheaderlist is:
# One regular expression per line, with matching headers causing a request to be blocked.
# Headers are matched/replaced on a line-by-line basis, not as a contiguous block.
# Use e.g. to remove cookies or prevent certain user-agents.
headerregexplist = '{$e2_dir}/etc/e2guardian/lists/headerregexplist.g_{$e2guardian_groups['name']}'
bannedregexpheaderlist = '{$e2_dir}/etc/e2guardian/lists/bannedregexpheaderlist.g_{$e2guardian_groups['name']}'


# Weighted Phrase Mode
#
# Optional. Overrides the weightedphrasemode option in e2guardian.conf
# for this particular group.  See documentation for supported values in
# that file.
weightedphrasemode = {$e2guardian_groups['weightedphrasemode']}


# Naughtiness Limit
#
# This is the limit over which the page will be blocked. Each weighted phrase is given a value
# (either positive or negative) and the values are added up. Phrases related to good subjects
# will have negative values, phrases related to bad subjects will have positive values.
# See the weightedphraselist file for examples.
#
# As a guideline:
# 50 is suitable for young children, 100 for old children, 160 for young adults.
naughtynesslimit = {$e2guardian_groups['naughtynesslimit']}


# Search Term Blocking
#
# Search terms can be extracted from search URLs and filtered using the
# bannedphraselist, weightedphraselist and exceptionphraselist, with a separate
# threshold for blocking than that used for normal page content.
# To do this, the first two options below must be enabled.


# Search Engine Regular Expression List
#
# List of regular expressions for matching search engine URLs.  It is assumed
# that the search terms themselves will be contained within the first submatch
# of each expression.
searchregexplist = '{$e2_dir}/etc/e2guardian/lists/searchengineregexplist.g_{$e2guardian_groups['name']}'


# Search Term Limit
#
# The limit over which requests containing search terms which match
# the weightedphraselist will be blocked. This should usually be lower than the
# 'naughtynesslimit' value above, because the amount of text being filtered
# is only a few words, rather than a whole page.
#
# This option must be uncommented if searchengineregexplist is uncommented.
# A value of 0 here indicates that search terms should be extracted,
# for logging/reporting purposes, but no filtering should be performed
# on the resulting text.
searchtermlimit = {$e2guardian_groups['searchtermlimit']}


# Search Term Lists
#
# If the three lines below are uncommented, search term blocking will use
# the banned, weighted and exception phrases from these lists, instead of using
# the same phrase lists as for page content.  This is optional but recommended,
# as weights for individual phrases in the "normal" lists may not be
# appropriate for blocking when those phrases appear in a much smaller block
# of text.
#
# Please note that all or none of the below should be uncommented, not a
# mixture.
bannedsearchtermlist = '{$e2_dir}/etc/e2guardian/lists/bannedsearchtermlist.g_{$e2guardian_groups['name']}'
weightedsearchtermlist = '{$e2_dir}/etc/e2guardian/lists/weightedsearchtermlist.g_{$e2guardian_groups['name']}'
exceptionsearchtermlist = '{$e2_dir}/etc/e2guardian/lists/exceptionsearchtermlist.g_{$e2guardian_groups['name']}'


# Category Display Threshold
#
# This option only applies to pages blocked by weighted phrase filtering.
# Defines the minimum score that must be accumulated within a particular
# category in order for it to show up on the block pages category list.
#
# All categories under which the page scores positively will be logged; those
# that were not displayed to the user appear in brackets.
#
# -1 = display only the highest scoring category
# 0 = display all categories (default)
# > 0 = minimum score for a category to be displayed
categorydisplaythreshold = {$e2guardian_groups['categorydisplaythreshold']}


# Embedded URL Weighting
#
# When set to value greater than 0, this option causes URLs embedded within a
# page's HTML (from links, image tags, etc.) to be extracted and checked against the
# bannedsitelist and bannedurllist. Each link to a banned page causes the amount set
# here to be added to the page's weighting.
#
# The behaviour of this option with regards to multiple occurrences of a site/URL is
# affected by the weightedphrasemode setting.
#
# NB: Currently, this feature uses regular expressions that require the PCRE library.
# As such, it is only available if you compiled E2guardian with '--enable-pcre=yes'.
# You can check compile-time options by running 'e2guardian -v'.
#
# WARNING: This option is highly CPU intensive!
#
# Set to 0 to disable.
# Defaults to 0.
embeddedurlweight = {$e2guardian_groups['embeddedurlweight']}


# Maximum Upload Size
#
# POST Protection (web upload and forms) does not block forms without any file upload,
# i.e. this is just for blocking or limiting uploads.
#
# Measured in kibibytes (KiB) after MIME encoding and header bump.
#
# Use 0 for a complete block
# Use higher (e.g. 512 = 512KiB) for limiting.
# Use -1 for no blocking.
maxuploadsize = {$e2guardian_groups['maxuploadsize']}


# Enable PICS rating support
#
# Defaults to disabled
# on | off (default = off)
enablepics = {$e2guardian_groups['enablepics']}


# Temporary Denied Page Bypass
#
# This provides a link on the denied page which allows to bypass the ban for a few minutes.
# To be secure, it uses a random hashed secret generated at daemon startup.
# You define the number of seconds the bypass will function for before the denied page
# will appear again.
#
# To allow the link on the denied page to appear, you will need to edit the template.html
# or e2guardian.pl file for your language.
#
# 300 = enable for 5 minutes
# 0 = disable ( defaults to 0 )
# -1 = enable but you require a separate program/CGI to generate a valid link
bypass = {$e2guardian_groups['bypass']}


# Temporary Denied Page Bypass Secret Key
#
# If not left empty, you can specify a key rather than generating a random one.
# It must be more than 8 chars long
#
# Example 1: 'Mary had a little lamb.'
# Example 2: '76b42abc1cd0fdcaf6e943dcbc93b826'
# '' = generate a random one (recommended and default)
bypasskey = '{$e2guardian_groups['bypasskey']}'


# Infection/Scan Error Bypass
#
# Similar to the 'bypass' setting, but specifically for bypassing files scanned and found
# to be infected, or files that trigger scanner errors - for example, archive types with
# recognised but unsupported compression schemes, or corrupt archives.
#
# The option specifies the number of seconds for which the bypass link will be valid.
# 300 = enable for 5 minutes
# 0 = disable (default)
# -1 = enable, but require a separate program/CGI to generate a valid link
infectionbypass = {$e2guardian_groups['infectionbypass']}


# Infection/Scan Error Bypass Secret Key
#
# Same as the 'bypasskey' option, but used for infection bypass mode.
infectionbypasskey = '{$e2guardian_groups['infectionbypasskey']}'


# Infection/Scan Error Bypass on Scan Errors Only
#
# Enable this option to allow infectionbypass links only when virus scanning fails,
# not when a file is found to contain a virus.
#
# on = enable (default and highly recommended)
# off = disable
infectionbypasserrorsonly = {$e2guardian_groups['infectionbypasserrorsonly']}


# Disable Content Scanning
#
# Enabling this option disables content scanning for this group.
# Content scanning primarily means AV scanning (if enabled) but could include
# other types.
#
# on | off (default = off)
disablecontentscan = {$e2guardian_groups['disablecontentscan']}


# Enable Deep URL Analysis
#
# When enabled, E2guardian looks for URLs within URLs, checking against the bannedsitelist and
# bannedurllist. This can be used, for example, to block images originating from banned
# sites from appearing in Google Images search results, as the original URLs are
# embedded in the thumbnail GET requests.
#
# on | off (default = off)
deepurlanalysis = {$e2guardian_groups['deepurlanalysis']}


# Reporting Level
#
# If defined, this overrides the global setting in e2guardian.conf for
# members of this filter group.
#
# -1 = log, but do not block - Stealth mode
#  0 = just say 'Access Denied'
#  1 = report why but not what denied phrase
#  2 = report fully
#  3 = use HTML template file (accessdeniedaddress ignored) - recommended
#reportinglevel = 3
{$groupreportinglevel}


# Access Denied Script URL
#
# accessdeniedaddress is the address of your web server to which the E2guardian's
# CGI reporting script was copied. Only used with reporting levels 1 and 2.
#
# This webserver must be either:
# 1. Non-proxied. Either a machine on the local network, or listed as an exception
#    in your browser's proxy configuration.
# 2. Added to the exceptionsitelist.
#
# Option 1 is preferable; option 2 is only for users using both transparent
# proxying and a non-local server to host this script.
#
# Individual filter groups can override this setting in their own configuration.
#accessdeniedaddress = 'http://YOURSERVER.YOURDOMAIN/cgi-bin/e2guardian.pl'
{$accessdeniedaddress}


# HTML Template Override
#
# If defined, this specifies a custom HTML template file for members of this
# filter group, overriding the global setting in e2guardian.conf. This is
# only used in reporting level 3.
#
# The default template file path is <languagedir>/<language>/template.html;
# e.g. {$e2_dir}/share/e2guardian/languages/ukenglish/template.html when using 'ukenglish'
# language.
#
# This option generates a file path of the form <languagedir>/<language>/<htmltemplate>;
# e.g. {$e2_dir}/share/e2guardian/languages/ukenglish/custom.html
#
#htmltemplate = 'custom.html'


# Email Reporting (original patch by J. Gauthier)

# Use SMTP
#
# Enables system wide events to be reported by email.
# You need to configure mail program (see 'mailer' in global config) and and email recipients.
#
# default usesmtp = off
#!! Not compiled !!usesmtp = off


# Mail From
#
# Who the email would come from.
# Example: mailfrom = 'e2guardian@mycompany.com'
#!! Not compiled !!mailfrom = ''


# Antivirus Admin
#
# Who the virus emails go to (if notifyav is on).
# Example: avadmin = 'admin@mycompany.com'
#!! Not compiled !!avadmin = ''


# Content Admin
#
# Who the content filter emails go to (when thresholds are exceeded
# and contentnotify is on).
# Example: contentadmin = 'admin@mycompany.com'
#!! Not compiled !!contentadmin = ''


# Antivirus Email Subject
#
# Subject of the email sent when a virus is caught.
# Only applicable if notifyav is on.
# default avsubject = 'e2guardian virus block'
#!! Not compiled !!avsubject = 'e2guardian virus block'


# Content Filter Email Subject
#
# Subject of the email sent when violation thresholds are exceeded.
# default contentsubject = 'e2guardian violation'
#!! Not compiled !!contentsubject = 'e2guardian violation'


# AV Email Notifications
#
# If usesmtp/notifyav is on, this will send a notification any time an
# infection is found.
#
# Important: If this option is off, viruses will still be recorded like a
# content infraction.
#!! Not compiled !!notifyav = off


# Content Filter Email Notifications
#
# If usesmtp is on, this will send a notification based on thresholds
# below.
#!! Not compiled !!notifycontent = off


# Threshold By User
#
# Results are only predictable with user authenticated configs.
# If enabled, per-user violation/threshold count is kept track of.
#!! Not compiled !!thresholdbyuser = off


# Number of Violations
#
# Number of violations before notification.
# Setting to 0 will never trigger a notification.
#!! Not compiled !!violations = 0


# Violations Threshold
#
# If 'violations' occur in 'threshold' seconds, then a notification is made.
# if this is set to 0, then whenever the set number of violations occurs,
# a notification will be sent.
#!! Not compiled !!threshold = 0


# SSL Certificate Checking
#
# On HTTPS connections, check whether SSL server certificates are valid
# and signed by a CA in the configured path.
sslcheckcert = {$e2guardian_groups['sslcheckcert']}


# SSL Man-in-the-Middle
#
# Forge SSL certificates for all sites, decrypt the data, then re-encrypt them
# using a different private key. Used to filter SSL sites.
sslmitm = {$e2guardian_groups['sslmitm']}
{$e2guardian_groups['mitmkey']}

EOF;

?>
